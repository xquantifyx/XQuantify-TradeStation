#!/bin/bash
#
# setup-system-nginx-proxy.sh - Configure system nginx as reverse proxy for XQuantify TradeStation
#
# This script creates a system nginx configuration to proxy requests to Docker MT5 instance
# allowing you to access MT5 via standard ports 80/443 while keeping Docker nginx on 8080/8443
#

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

echo -e "${BLUE}"
cat << "EOF"
╔════════════════════════════════════════════════╗
║   System Nginx Reverse Proxy Setup            ║
║   XQuantify TradeStation                       ║
╚════════════════════════════════════════════════╝
EOF
echo -e "${NC}"

# Check if system nginx is installed
if ! command -v nginx &> /dev/null; then
    print_error "System nginx is not installed"
    exit 1
fi

# Check if nginx is running
if ! systemctl is-active --quiet nginx 2>/dev/null; then
    print_warning "System nginx is not running. Starting it..."
    sudo systemctl start nginx
fi

# Get project directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
PROJECT_DIR="$( cd "$SCRIPT_DIR/.." &> /dev/null && pwd )"

cd "$PROJECT_DIR"

# Get server IP
PUBLIC_IP=$(curl -s -4 --max-time 5 ifconfig.me 2>/dev/null || echo "")
LOCAL_IP=$(hostname -I 2>/dev/null | awk '{print $1}' || echo "localhost")
SERVER_IP=${PUBLIC_IP:-$LOCAL_IP}

# Check if SSL certificates exist
if [ -f "nginx/ssl/cert.pem" ] && [ -f "nginx/ssl/privkey.pem" ]; then
    HAS_SSL=true
    SSL_CERT_PATH="$PROJECT_DIR/nginx/ssl/cert.pem"
    SSL_KEY_PATH="$PROJECT_DIR/nginx/ssl/privkey.pem"
else
    HAS_SSL=false
fi

print_info "Creating nginx configuration for MT5..."

# Create nginx configuration
NGINX_CONF="/etc/nginx/sites-available/xquantify-mt5"

sudo tee "$NGINX_CONF" > /dev/null << EOF
# XQuantify TradeStation - Reverse Proxy Configuration
# Auto-generated by setup-system-nginx-proxy.sh

# WebSocket upgrade map
map \$http_upgrade \$connection_upgrade {
    default upgrade;
    '' close;
}

# HTTP Server - Redirect to HTTPS or proxy
server {
    listen 80;
    listen [::]:80;
    server_name $SERVER_IP _;

EOF

if [ "$HAS_SSL" = true ]; then
    sudo tee -a "$NGINX_CONF" > /dev/null << EOF
    # Redirect HTTP to HTTPS
    return 301 https://\$server_name\$request_uri;
}

# HTTPS Server - Proxy to Docker MT5
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name $SERVER_IP _;

    # SSL Configuration
    ssl_certificate $SSL_CERT_PATH;
    ssl_certificate_key $SSL_KEY_PATH;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Proxy to Docker MT5 (port 6080)
    location / {
        proxy_pass http://127.0.0.1:6080;
        proxy_http_version 1.1;

        # WebSocket support
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection \$connection_upgrade;

        # Standard proxy headers
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;

        # noVNC and WebSocket specific
        proxy_read_timeout 61s;
        proxy_buffering off;
        proxy_cache off;
    }
}
EOF
else
    sudo tee -a "$NGINX_CONF" > /dev/null << EOF
    # Proxy to Docker MT5 (port 6080)
    location / {
        proxy_pass http://127.0.0.1:6080;
        proxy_http_version 1.1;

        # WebSocket support
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection \$connection_upgrade;

        # Standard proxy headers
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;

        # noVNC and WebSocket specific
        proxy_read_timeout 61s;
        proxy_buffering off;
        proxy_cache off;
    }
}
EOF
fi

print_success "Configuration file created: $NGINX_CONF"

# Enable the site
print_info "Enabling site configuration..."

if [ -f "/etc/nginx/sites-enabled/xquantify-mt5" ]; then
    sudo rm -f /etc/nginx/sites-enabled/xquantify-mt5
fi

sudo ln -s "$NGINX_CONF" /etc/nginx/sites-enabled/xquantify-mt5

print_success "Site enabled"

# Test nginx configuration
print_info "Testing nginx configuration..."
if sudo nginx -t; then
    print_success "Nginx configuration is valid"
else
    print_error "Nginx configuration test failed"
    print_info "Rolling back changes..."
    sudo rm -f /etc/nginx/sites-enabled/xquantify-mt5
    sudo rm -f "$NGINX_CONF"
    exit 1
fi

# Reload nginx
print_info "Reloading nginx..."
if sudo systemctl reload nginx; then
    print_success "Nginx reloaded successfully"
else
    print_error "Failed to reload nginx"
    exit 1
fi

echo ""
print_success "System nginx reverse proxy configured!"
echo ""
print_info "Access your MT5 platform:"
if [ "$HAS_SSL" = true ]; then
    echo -e "  ${GREEN}✓ HTTPS:${NC} https://${SERVER_IP}/vnc.html"
    echo -e "  ${YELLOW}  HTTP:${NC}  http://${SERVER_IP}/vnc.html (redirects to HTTPS)"
else
    echo -e "  ${YELLOW}HTTP:${NC} http://${SERVER_IP}/vnc.html"
fi
echo ""
print_info "Direct access (bypass system nginx):"
echo "  https://${SERVER_IP}:8443/vnc.html"
echo "  http://${SERVER_IP}:8080/vnc.html"
echo ""
print_info "Configuration file: $NGINX_CONF"
echo ""

# Show how to disable if needed
print_info "To disable this configuration:"
echo "  sudo rm /etc/nginx/sites-enabled/xquantify-mt5"
echo "  sudo systemctl reload nginx"
echo ""

print_success "Setup complete!"
